{"version":3,"sources":["components/Persons.js","components/PersonForm.js","components/Filter.js","services/phoneNumbers.js","components/Messages.js","App.js","index.js"],"names":["Persons","person","remove","map","key","id","name","number","onClick","PersonForm","submit","nameChange","phoneChange","phone","onSubmit","onChange","value","required","type","Filter","filterChange","filter","url","axios","get","then","res","data","post","put","delete","Messages","message","style","error","color","borderColor","className","App","useState","persons","setPersons","newName","setNewName","newPhone","setNewPhone","setFilter","personsToShow","setPersonsToShow","setMessage","getAllAndSetState","phoneNumbers","useEffect","setAndRemoveMessage","setTimeout","e","inputValue","target","toLowerCase","includes","preventDefault","personObject","window","confirm","catch","concat","response","newPersons","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d24fbae.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Persons = ({person, remove}) => {\r\n  return (\r\n    <>\r\n    { person.map(person =>\r\n      <p key={person.id}>{person.name} {person.number}\r\n      <button onClick={()=>remove(person.id)}>delete</button></p>\r\n    )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst PersonForm = ({submit, nameChange, phoneChange, name, phone}) => {\r\n  return (\r\n    <form onSubmit={submit}>\r\n      <div>\r\n        name: <input onChange = {nameChange} value={name} required={true} />\r\n      </div>\r\n      <div>number: <input onChange = {phoneChange} value={phone} required={true} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Filter = ({filterChange, filter}) => {\r\n  return (\r\n    <div>\r\n      filter shown with: <input onChange={filterChange} value={filter} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter","import axios from 'axios'\r\n\r\nconst url = 'api/persons'\r\n\r\nconst getAll = () => axios.get(url).then(res => res.data)\r\n\r\nconst createOne = (person) => axios.post(url, person).then(res => res.data)\r\n\r\nconst updateOne = (id, person) => axios.put(`${url}/${id}`, person).then(res=>res.data)\r\n\r\nconst deleteOne = id => axios.delete(`${url}/${id}`)\r\n\r\n\r\nexport default {getAll, createOne, updateOne, deleteOne}","import React from 'react'\r\nimport './Message.css'\r\n\r\n\r\nconst Messages = ({message}) => {\r\n\r\n  if (message.message == null) {\r\n    return(null)\r\n  }\r\n\r\n  let style = {}\r\n  if (message.error) {\r\n    style = {\r\n      color: 'red',\r\n      borderColor: 'red'\r\n    }\r\n  }\r\n \r\n  return (\r\n    <div className=\"message\" style={style}>{message.message}</div>\r\n  )\r\n}\r\n\r\nexport default Messages","import React, { useState, useEffect } from 'react'\r\nimport Persons from './components/Persons'\r\nimport PersonForm from './components/PersonForm'\r\nimport Filter from './components/Filter'\r\nimport phoneNumbers from './services/phoneNumbers'\r\nimport Messages from './components/Messages'\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [ persons, setPersons ] = useState([])\r\n\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newPhone, setNewPhone ] = useState('')\r\n  const [ filter, setFilter ] = useState('')\r\n  const [ personsToShow, setPersonsToShow ] = useState([...persons])\r\n  const [ message, setMessage ] = useState({message: null, error: false})\r\n\r\n  const nameChange = (e)=>setNewName(e.target.value)\r\n  const phoneChange = (e)=>setNewPhone(e.target.value)\r\n\r\n  const getAllAndSetState =  () => {\r\n    phoneNumbers.getAll().then((data)=>{\r\n    setPersonsToShow(data)\r\n    setPersons(data)\r\n    })\r\n  } //Called to reset default state\r\n\r\n  useEffect(() => {\r\n    getAllAndSetState()\r\n  }, [])\r\n\r\n  const setAndRemoveMessage = (message, error=false) => {\r\n    setMessage({message: message, error: error})\r\n    setTimeout(()=>{setMessage({message: null, error: false})}, 5000)\r\n  } //set and remove messages after 5 seconds\r\n\r\n  const addPerson = (e) => {\r\n    e.preventDefault()\r\n    const personObject = { name: newName, number: newPhone };\r\n    const personsName = persons.map((person) => person.name)\r\n\r\n    if (personsName.includes(personObject.name)){\r\n      if (window.confirm(`${personObject.name} is already added to phonebook, replace number?`)) {\r\n\r\n        const id = persons.filter((person) => person.name === personObject.name)[0].id\r\n\r\n        phoneNumbers.updateOne(id, personObject).then((data)=>{\r\n          setAndRemoveMessage(`${data.name}'s contact has been updated successfully`)\r\n          getAllAndSetState()\r\n        }).catch(()=>{\r\n          setAndRemoveMessage(`${personObject.name} has already been removed from server`, true)\r\n          getAllAndSetState()\r\n        })\r\n\r\n      }\r\n    }\r\n    else {\r\n\r\n      phoneNumbers.createOne(personObject).then((data) => {\r\n        setAndRemoveMessage(`${data.name}'s contact has been Added`)\r\n        setPersons(persons.concat(data))\r\n        setPersonsToShow(personsToShow.concat(data))\r\n      }).catch((error)=>{\r\n        setAndRemoveMessage(error.response.data.error || 'An error occured, please try again!!', true)\r\n      })\r\n\r\n    }\r\n  }\r\n\r\n  const filterEvent = (e) => {\r\n    const inputValue = e.target.value.toLowerCase()\r\n    setFilter(inputValue) //set the filter input value to value in event\r\n\r\n    if (inputValue===\"\"){ setPersonsToShow([...persons]) }\r\n    else {\r\n      //chanaging state of persons to show based on filter\r\n      setPersonsToShow([...persons].filter(\r\n        person => person.name.toLowerCase().includes(inputValue)\r\n        )\r\n      )\r\n    }\r\n  }\r\n\r\n  const deletePerson = (id) => {\r\n    if (window.confirm(\"Do you really want to delete this contact?\")) { \r\n      phoneNumbers.deleteOne(id).then(()=>{\r\n        const newPersons = persons.filter((person)=>person.id !== id)\r\n        setAndRemoveMessage('Contact has been deleted')\r\n        setPersons(newPersons)\r\n        setPersonsToShow(newPersons)\r\n      }).catch(e=>{\r\n        setAndRemoveMessage('Contact did not exist on server', true)\r\n        getAllAndSetState()\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Messages message={message}/>\r\n      <Filter filterChange={filterEvent} filter={filter} /> \r\n      <h2>Add New Number</h2>\r\n      <PersonForm \r\n        submit={addPerson}\r\n        nameChange = {nameChange}\r\n        phoneChange = {phoneChange}\r\n        name = {newName}\r\n        phone = {newPhone}\r\n      />\r\n      <h2>Numbers</h2>\r\n      <Persons person={personsToShow} remove={deletePerson}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}